ENTRYTYPE,ID,abstract,author,doi,eprint,journal,number,pages,title,url,volume,year
article,doi:10.1177/00472395211018801,"The computer science (CS) unplugged approach intends to teach CS concepts and computational thinking skills without employing any digital tools. The current study conducted a systematic literature review to analyze research studies that conducted investigations related to implementations of CS unplugged activities. A systematic review procedure was developed and applied to detect and subsequently review relevant research studies published from 2010 to 2019. It was found that 55 research studies (17 articles + 38 conference proceedings) satisfied the inclusion criteria for the analysis. These research studies were then examined with regard to their demographic characteristics, research methodologies, research results, and main findings. It was found that the unplugged approach was realized and utilized differently among researchers. The majority of the studies used the CS unplugged term when referring to “paper–pencil activities,” “problem solving,” “storytelling,” “games,” “tangible programming,” and even “robotics.”",Ali Battal and Gülgün Afacan Adanır and Yasemin Gülbahar,10.1177/00472395211018801,https://doi-org.crai.referencistas.com/10.1177/00472395211018801,Journal of Educational Technology Systems,1,24–47,Computer Science Unplugged: A Systematic Literature Review,https://doi-org.crai.referencistas.com/10.1177/00472395211018801,50,2021a
article,doi:10.2190/EC.51.2.c,"Scratch, a visual programming language, was used in many studies in computer science education. Most of them reported positive results by integrating Scratch into K-12 computer courses. However, the object-oriented concept, one of the important computational thinking skills, is not represented well in Scratch. Alice, another visual programming language, seems to have better illustration of the object-oriented concept for programming novices. To demonstrate effects of Alice and Scratch, we compared students’ responses to both visual programming languages, especially for students with low performances, in an introductory programming course. The relationships among learning engagement, learning anxiety, and learning playfulness were explored. The results could be referred to by computer science instructors to select proper visual programming language for corrective instruction.",Chih-Kai Chang,10.2190/EC.51.2.c,https://doi-org.crai.referencistas.com/10.2190/EC.51.2.c,Journal of Educational Computing Research,2,185–204,Effects of Using Alice and Scratch in an Introductory Programming Course for Corrective Instruction,https://doi-org.crai.referencistas.com/10.2190/EC.51.2.c,51,2014b
article,doi:10.1177/0042085913490554,"Following the belief that diversity breeds innovation in scientific endeavors, there is a national push for more diversity in the science, technology, engineering, and mathematics (STEM) workforce in order to maintain national economic competitiveness. Currently, STEM-related employment is only 28% non-White; however, greater efforts to recruit and retain underrepresented minorities should increase this figure. Amidst the attention given to supporting “leaky pipelines,” less emphasis has been placed on mitigating challenges associated with bringing diverse cultures together. This article presents a framework for supporting underrepresented minorities in building STEM-relevant skills and enhancing their ability to collaborate with peers different from themselves.",Shaundra Bryant Daily and Wanda Eugene,10.1177/0042085913490554,https://doi-org.crai.referencistas.com/10.1177/0042085913490554,Urban Education,5,682–704,Preparing the Future STEM Workforce for Diverse Environments,https://doi-org.crai.referencistas.com/10.1177/0042085913490554,48,2013c
article,doi:10.1177/0047239520926971,"Courses on computer programming are included in the curricula of almost all engineering disciplines. We surveyed the research literature and identified the techniques that are commonly used by instructors for teaching these courses. We observed that visual programming and game-based learning can enhance computational thinking and problem-solving skills in students and may be used to introduce them to programming. Robot programming may be used to attract students to programming, but the success of this technique is subjected to the availability of robots. Pair and collaborative programming allows students to learn from one another and write efficient programs. Assessment systems help instructors in evaluating programs written by students and provide them with timely feedback. Furthermore, an analysis of citations showed that Scratch is the most researched tool for teaching programming. We discuss how these techniques may be used to teach introductory courses, advanced courses, and massive open online courses on programming.",Kanika and Shampa Chakraverty and Pinaki Chakraborty,10.1177/0047239520926971,https://doi-org.crai.referencistas.com/10.1177/0047239520926971,Journal of Educational Technology Systems,2,170–198,Tools and Techniques for Teaching Computer Programming: A Review,https://doi-org.crai.referencistas.com/10.1177/0047239520926971,49,2020d
article,doi:10.1177/0255761419861442,"This study explored how Australian music technology courses teach employability skills. A curriculum mapping of 63 undergraduate courses was conducted with course learning outcomes aligned against two benchmarks. The first benchmark was the Ten Skills for the Future Workforce which identifies key employability skills graduates will require in the coming decade. The second benchmark was the Australian Qualifications Framework Specification for the Bachelor Degree which defines the generic skills graduates must obtain through Australian Bachelor Degrees. This curriculum mapping reveals that Australian music technology courses teach Novel and Adaptive Thinking, Computational Thinking, New Media Literacy, and Design Mindsets universally. However, this curriculum mapping also reveals a deficit in employability skills related to Cross-Cultural Competency, Transdisciplinarity, Virtual Collaboration, and Collaboration more generally. The implications of this mapping is that Australian music technology educators seem to be prioritizing specific technical and creative skills over higher-order applications of skills and knowledge which are contextualized in their broader social and cultural contexts. Finally, this article shows how curriculum mapping can be implemented to embed employability skills progressively across a program sequence using a case study from the School of Music, University of Queensland.",Eve Klein and James Lewandowski-Cox,10.1177/0255761419861442,https://doi-org.crai.referencistas.com/10.1177/0255761419861442,International Journal of Music Education,4,636–653,Music technology and Future Work Skills 2020: An employability mapping of Australian undergraduate music technology curriculum,https://doi-org.crai.referencistas.com/10.1177/0255761419861442,37,2019e
article,doi:10.1111/j.1467-9280.1994.tb00625.x,"Traditional theories of cognitive development predict that children progress from intuitive to computational thinking, whereas fuzzy-trace theory makes the opposite prediction To evaluate these alternatives, framing problems were administered to preschoolers, second graders, and fifth graders Consistent with fuzzy-trace theory, results indicated (a) that younger children focused on quantitative differences between outcomes and did not exhibit framing effects (risk avoidance for gains, risk seeking for losses) and (b) that older children assimilated these quantitative differences and displayed framing effects",Valerie F Reyna and Susan C Ellis,10.1111/j.1467-9280.1994.tb00625.x,https://doi-org.crai.referencistas.com/10.1111/j.1467-9280.1994.tb00625.x,Psychological Science,5,275–279,Fuzzy-Trace Theory and Framing Effects in Children’s Risky Decision Making,https://doi-org.crai.referencistas.com/10.1111/j.1467-9280.1994.tb00625.x,5,1994f
article,doi:10.1177/1464884914545729,"Research on ‘digital’ journalism has focused largely on online news, with comparatively less interest in the longer-term implications of software and computational technologies. Drawing upon a 6-year study of the Toronto Star, this article provides an account of TOPS, an in-house web content management system which served as the backbone of thestar.com for 6 years. For some, TOPS was a successful software innovation, while for others, a strategic digital ‘property’. But for most journalists, it was slow, deficient in functionality, aesthetically unappealing and cumbersome. Although several organizational factors can explain TOPS’ obstinacy, I argue for particular attention to the complex ontology of software. Based on an outline of this ontology, I suggest software be taken seriously as an object of journalism, which implies acknowledging its partial autonomy from human use or authorization, accounting for its ability to mutate indefinitely and analysing its capacity to encourage forms of ‘computational thinking’.",Scott Rodgers,10.1177/1464884914545729,https://doi-org.crai.referencistas.com/10.1177/1464884914545729,Journalism,1,10–26,"Foreign objects? Web content management systems, journalistic cultures and the ontology of software",https://doi-org.crai.referencistas.com/10.1177/1464884914545729,16,2015g
article,doi:10.1177/1470412920964905,"This article proposes thinking of media archaeology as an operating table upon which historical, material and technological interconnections between fashion and film are made. By exploring how early cinema and digital film can be coupled to textile as technology, more specifically through the mechanisms of the sewing machine and the Jacquard loom, it extends the historical span from the mid-1890s, with the invention of cinema as projection, to the early 1800s, when computational thinking was successfully implemented as weaving technique. Instead of focusing on film and fashion as means of visual representation, the author relies on the concept of inscription for a better understanding of both cinema (as recording of light and movement) and textile (with its various thread techniques of weaving, stitching, knitting, etc.).",Wanda Strauven,10.1177/1470412920964905,https://doi-org.crai.referencistas.com/10.1177/1470412920964905,Journal of Visual Culture,3,362–377,Sewing machines and weaving looms: a media archaeological encounter between fashion and film,https://doi-org.crai.referencistas.com/10.1177/1470412920964905,19,2020h
article,doi:10.1177/0735633117746747,"Computer programming has been gradually emphasized in recent computer literacy education and regarded as a requirement for all middle school students in some countries. To understand young students’ perceptions about their own learning in computer programming, this study aimed to develop an instrument, Computer Programming Self-Efficacy Scale (CPSES), for all students above middle school levels. Based on Berland and Lee’s computational thinking framework, this study developed the CPSES items at a literacy level and finally the instrument included the five subscales: Logical Thinking, Algorithm, Debug, Control, and Cooperation. An exploratory factor analysis and reliability tests were conducted in this study. The reliability alpha was .96 for the overall scale, and ranged from .84 to .96 for the subscales. This study also confirmed the positive correlation between computer programming experience and computer programming self-efficacy. In addition, for low- and middle-experienced learners, significant gender differences were found in two subscales: Algorithm and Debug. The CPSES can be applied as an evaluation tool in computer education, robotics education, as well as integrated STEM or STEAM education in which computer programming was regarded as a part of computer literacy.",Meng-Jung Tsai and Ching-Yeh Wang and Po-Fen Hsu,10.1177/0735633117746747,https://doi-org.crai.referencistas.com/10.1177/0735633117746747,Journal of Educational Computing Research,8,1345–1360,Developing the Computer Programming Self-Efficacy Scale for Computer Literacy Education,https://doi-org.crai.referencistas.com/10.1177/0735633117746747,56,2019i
article,doi:10.1177/1478077117734660,"Parquet Deformation is an architectural studio exercise introduced by William Huff in 1960s. It aims to improve students’ reasoning of spatiotemporal variation by utilizing sequential shapeshifting of patterns. This article examines the outcomes of this educational research from a perspective of design computing with a purpose to remark its pedagogical significance. A multilayered reading about the exercise will reveal its historical, theoretical, and artistic backgrounds. Then the common structural elements and different construction approaches are explained along with a novel design and analysis method. The proposed method embeds variations of two-dimensional pattern deformations on a third dimension. It enables various analyses such as the measurement of regularity and locating the attractor points. This study is expected to exemplify how computational thinking and new digital tools change the way designers would approach to such systematic compositions.",Tuğrul Yazar,10.1177/1478077117734660,https://doi-org.crai.referencistas.com/10.1177/1478077117734660,International Journal of Architectural Computing,4,250–267,Revisiting Parquet Deformations from a computational perspective: A novel method for design and analysis,https://doi-org.crai.referencistas.com/10.1177/1478077117734660,15,2017j
