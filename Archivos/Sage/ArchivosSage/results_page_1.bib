@article{doi:10.1177/1475725716659252,
author = {Nicole D. Anderson},
title = {A Call for Computational Thinking in Undergraduate Psychology},
journal = {Psychology Learning & Teaching},
volume = {15},
number = {3},
pages = {226–234},
year = {2016a},
doi = {10.1177/1475725716659252},
URL = {https://doi-org.crai.referencistas.com/10.1177/1475725716659252},
eprint = {https://doi-org.crai.referencistas.com/10.1177/1475725716659252},
abstract = {Computational thinking is an approach to problem solving that is typically employed by computer programmers. The advantage of this approach is that solutions can be generated through algorithms that can be implemented as computer code. Although computational thinking has historically been a skill that is exclusively taught within computer science, there has been a more recent movement to introduce these skills within other disciplines. Psychology is an excellent example of a discipline that would benefit from computational thinking skills because of the nature of questions that are typically asked within the discipline. However, there has not been a formal curriculum proposed to teach computational thinking within psychology and the behavioural sciences. I will argue that computational thinking is a fundamental skill that can easily be introduced to psychology students throughout their undergraduate education. This would provide students with the skills necessary to become successful researchers, and would also provide a practical and marketable skill to all psychology graduates.}
}

@article{doi:10.1177/07356331211033158,
author = {Ndudi O. Ezeamuzie and Jessica S. C. Leung},
title = {Computational Thinking Through an Empirical Lens: A Systematic Review of Literature},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {2},
pages = {481–511},
year = {2022b},
doi = {10.1177/07356331211033158},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211033158},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211033158},
abstract = {This article provides an overview of the diverse ways in which computational thinking has been operationalised in the literature. Computational thinking has attracted much interest and debatably ranks in importance with the time-honoured literacy skills of reading, writing, and arithmetic. However, learning interventions in this subject have modelled computational thinking differently. We conducted a systematic review of 81 empirical studies to examine the nature, explicitness, and patterns of definitions of computational thinking. Data analysis revealed that most of the reviewed studies operationalised computational thinking as a composite of programming concepts and preferred definitions from assessment-based frameworks. On the other hand, a substantial number of the studies did not establish the meaning of computational thinking when theorising their interventions nor clearly distinguish between computational thinking and programming. Based on these findings, this article proposes a model of computational thinking that focuses on algorithmic solutions supported by programming concepts which advances the conceptual clarity between computational thinking and programming.}
}

@article{doi:10.1177/21582440211016418,
author = {Vance Kite and Soonhye Park and Eric Wiebe},
title = {The Code-Centric Nature of Computational Thinking Education: A Review of Trends and Issues in Computational Thinking Education Research},
journal = {Sage Open},
volume = {11},
number = {2},
pages = {21582440211016416},
year = {2021c},
doi = {10.1177/21582440211016418},
URL = {https://doi-org.crai.referencistas.com/10.1177/21582440211016418},
eprint = {https://doi-org.crai.referencistas.com/10.1177/21582440211016418},
abstract = {Computational thinking (CT) is being recognized as a critical component of student success in the digital era. Many contend that integrating CT into core curricula is the surest method for providing all students with access to CT. However, the CT community lacks an agreed-upon conceptualization of CT that would facilitate this integration, and little effort has been made to critically analyze and synthesize research on CT/content integration (CTCI). Conflicting CT conceptualizations and little understanding of evidence-based strategies for CTCI could result in significant barriers to increasing students’ access to CT. To address these concerns, we analyzed 80 studies on CT education, focusing on both the CT conceptualizations guiding current CT education research and evidence-based strategies for CTCI. Our review highlights the code-centric nature of CT education and reveals significant gaps in our understanding of CTCI and CT professional development for teachers. Based on these findings, we propose an approach to operationalizing CT that promotes students’ participation in CT, present promising methods for infusing content with CT, and discuss future directions for CT education research.}
}

@article{doi:10.1177/07356331221121052,
author = {Rina PY Lai and Michelle R Ellefson},
title = {How Multidimensional is Computational Thinking Competency? A Bi-Factor Model of the Computational Thinking Challenge},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {2},
pages = {259–282},
year = {2023d},
doi = {10.1177/07356331221121052},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221121052},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221121052},
abstract = {Computational thinking (CT) is an emerging and multifaceted competence important to the computing era. However, despite the growing consensus that CT is a competence domain, its theoretical and empirical account remain scarce in the current literature. To address this issue, rigorous psychometric evaluation procedures were adopted to investigate the structure of CT competency, as measured by Computational Thinking Challenge (Lai, 2021a), in a large sample of 1,130 British secondary school students (Mage = 14.14 years, SDage = 1.45). Based on model comparison from an exploratory multidimensional item response theory approach, the results supported the multidimensional operationalization of CT competency. A confirmatory bi-factor item response theory model further suggested CT competency is comprised of a general CT competency factor and two specific factors for programming and non-programming problem-solving. Despite the multidimensionality, the common variance is largely explained by a primary general factor of CT competency, thus the use of a single scale score is recommended. Psychometric evaluation from the bi-factor model indicated good psychometric properties of the assessment tool. Overall, the bi-factor model provides a useful approach to investigating CT competency and serves as a robust test validation tool.}
}

@article{doi:10.3102/00346543241241327,
author = {Kathy A. Mills and Jen Cope and Laura Scholes and Luke Rowe},
title = {Coding and Computational Thinking Across the Curriculum: A Review of Educational Outcomes},
journal = {Review of Educational Research},
volume = {0},
number = {0},
pages = {00346543241241327},
year = {2024e},
doi = {10.3102/00346543241241327},
URL = {https://doi-org.crai.referencistas.com/10.3102/00346543241241327},
eprint = {https://doi-org.crai.referencistas.com/10.3102/00346543241241327},
abstract = {Teaching coding and computational thinking is an emerging educational imperative, now embedded in compulsory curriculum in the United States, Finland, the UK, Germany, Belgium, the Netherlands, New Zealand, and Australia. This meta-synthesis of 49 studies critically reviews recent international research (2009–2022) of coding and computational thinking as core and integrated across the curriculum. It addresses four essential problems: (a) What are the key features of learning environments that successfully develop students’ coding and computational thinking? (b) What is the impact of student engagement in coding and computational thinking on learning outcomes across curriculum areas? (c) What pedagogical constraints are evident for coding and computational thinking, including across curriculum areas? and (d) Which conceptual frameworks support coding and computational thinking, and what has been marginalized or excluded? The review advances knowledge of coding and computational thinking—vital to guide and develop future AI-based solutions to real-world problems that challenge disciplinary boundaries.}
}

@article{doi:10.1177/07356331241226746,
author = {Yan Sun and Jamie Dyer and Jonathan Harris},
title = {Preparing Teachers for Teaching Spatial Computational Thinking With Integrated Data Viewer Visualization of Weather Data: A Discipline-Based Perspective of Computational Thinking},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {4},
pages = {1061–1086},
year = {2024f},
doi = {10.1177/07356331241226746},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241226746},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241226746},
abstract = {This study was grounded in the spatial computational thinking model developed by the 3D Weather project funded by the NSF STEM+C program. The model reflects a discipline-based perspective towards computational thinking and captures the spatial nature of computational thinking in meteorology and the reliance of computational thinking on spatial thinking for geospatial analysis. The research was conducted among nineteen teachers attending the summer workshop offered by the project in its third project year to prepare them for teaching spatial computational thinking with IDV (Integrated Data Viewer, downloadable at https://www.unidata.ucar.edu/software/idv/) visualization of weather data. Quantitative survey data were collected measuring these teachers’ meteorology content knowledge, spatial computational thinking, self-efficacy for teaching spatial computational thinking, and epistemic cognition of teaching meteorology. The data were analyzed to examine the effects of the workshop in terms of these variables and the correlations among them were also explored.}
}

@article{doi:10.1177/0735633120972356,
author = {Meng-Jung Tsai and Jyh-Chong Liang and Chung-Yuan Hsu},
title = {The Computational Thinking Scale for Computer Literacy Education},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {4},
pages = {579–602},
year = {2021g},
doi = {10.1177/0735633120972356},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120972356},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120972356},
abstract = {Computational thinking has received tremendous attention from computer science educators and educational researchers in the last decade. However, most prior literature defines computational thinking as thinking outcomes rather than thinking processes. Based on Selby and Woodland’s framework, this study developed and validated the Computational Thinking Scale (CTS) to assess all students’ thought processes of computational thinking for both general and specific problem-solving contexts in five dimensions: abstraction, decomposition, algorithmic thinking, evaluation and generalization. A survey including 25 candidate items for CTS as well as demographic variables was administered to 388 junior high school students in Taiwan. An explorative factor analysis using the principal axis method with the oblimin rotation was used to validate the scale. Finally, 19 items were extracted successfully under the designed five dimensions, with a total explained variance of 64.03% and an overall reliability of 0.91. Results of the demographic comparisons showed that boys had a greater disposition than girls in decomposition thinking when solving problems using computer programming. In addition, programming learning experience, especially self-directed learning and after-school learning, had significant positive effects on all dimensions of CTS. Several future studies are suggested using this tool.}
}

@article{doi:10.1177/07356331211017794,
author = {Meng-Jung Tsai and Jyh-Chong Liang and Silvia Wen-Yu Lee and Chung-Yuan Hsu},
title = {Structural Validation for the Developmental Model of Computational Thinking},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {1},
pages = {56–73},
year = {2022h},
doi = {10.1177/07356331211017794},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211017794},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211017794},
abstract = {A prior study developed the Computational Thinking Scale (CTS) for assessing individuals’ computational thinking dispositions in five dimensions: decomposition, abstraction, algorithmic thinking, evaluation, and generalization. This study proposed the Developmental Model of Computational Thinking through validating the structural relationships among the five factors of the CTS. To examine the model, a questionnaire including the CTS was administered to 472 middle school students. A confirmatory factor analysis was used to confirm the construct of the measurements, and a PLS-SEM analysis was used to validate the structural relationships among the factors. The results confirmed that the 19-item CTS has good item reliability, internal consistency, and construct reliability for measuring computational thinking (CT). In the Developmental Model of CT, decomposition and abstraction significantly predict all other three CT dispositions, suggesting that they are the two fundamental factors required for CT development. Moreover, a significant linear prediction path was shown starting from algorithmic thinking, evaluation, until generalization. Thus, a multi-level model was confirmed for the conceptual framework of CT. This model suggests a possible sequence for CT development which may provide a guideline for the teaching objectives of CT for different learning stages in different school levels. Decomposition and abstraction are especially suggested to be emphasized in school curricula before teaching algorithmic thinking or algorithm designs.}
}

@article{doi:10.1177/0735633120988807,
author = {Sheng-Yi Wu and Yu-Sheng Su},
title = {Visual Programming Environments and Computational Thinking Performance of Fifth- and Sixth-Grade Students},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {6},
pages = {1075–1092},
year = {2021i},
doi = {10.1177/0735633120988807},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120988807},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120988807},
abstract = {Currently, many countries actively cultivate students to develop computational thinking ability. Many visual programming environments (VPEs) and physical robot courses have been integrated into computational thinking learning in the elementary education stage. This study explores the relationship between the programming learning environment (including VPE, physical robots, and no experience) and the computational thinking ability of higher-grade elementary school students of different genders. The results show that learning through VPE or physical robots can help students improve their computational thinking ability and that students learn better via physical robots. In addition, among the four dimensions of computational thinking ability, most students are weak in algorithm design. In terms of gender, no differences exist in computational thinking ability. Further analysis reveals that female students have better decomposition performance in VPE learning, while male students have better algorithm design performance.}
}

@article{doi:10.1177/07356331231220313,
author = {Ezgi Arzu Yurdakök and Filiz Kalelioğlu},
title = {The Effect of Teaching Physical Programming on Computational Thinking Skills and Self-Efficacy Perceptions Towards Computational Thinking},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {3},
pages = {785–815},
year = {2024j},
doi = {10.1177/07356331231220313},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231220313},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231220313},
abstract = {The study examined the effect of teaching text-based programming with a physical programming tool on secondary school students’ computational thinking skills and self-efficacy perceptions. The study was conducted according to a sequential explanatory design as a mixed method research. The study group consisted of 85 secondary school students. Within the scope of the study, a physical programming tool called Micro:bit was used to teach Python programming for a period of 6 weeks. Data were collected using the Self-Efficacy Perception Scale for Computational Thinking Skill, Bebras: International Challenge on Informatics and Computational Thinking Tasks, tests focused on programming tool, concepts, and processes, and through semi-structured interview questioning. According to the findings obtained from pretests and posttests, a significant and positive difference was found in the students’ computational thinking skills and self-efficacy perceptions towards computational thinking skill. As a result of having received instruction in programming, the students satisfactorily learnt the required programming concepts and processes. Through learning Python programming with a physical programming tool, the students not only gained the skills required to write appropriate syntax, and to test and debug code, but they also learnt programming concepts such as variables, conditional expressions, loops, and functions.}
}

