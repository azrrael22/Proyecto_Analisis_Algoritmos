@article{doi:10.1177/07356331211004048,
author = {Evan David Ballard and Rachelle Haroldson},
title = {Analysis of Computational Thinking in Children’s Literature for K-6 Students: Literature as a Non-Programming Unplugged Resource},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {8},
pages = {1487–1516},
year = {2022a},
doi = {10.1177/07356331211004048},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211004048},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211004048},
abstract = {As schools and districts across the United States adopt computer science standards and curriculum for K-12 computer science education, they look to integrate the foundational concepts of computational thinking (CT) into existing core subjects of elementary-age students. Research has shown the effectiveness of teaching CT elements (abstraction, generalization, decomposition, algorithmic thinking, debugging) using non-programming, unplugged approaches. These approaches address common barriers teachers face with lack of knowledge, familiarity, or technology tools. Picture books and graphic novels present an unexplored non-programming, unplugged resource for teachers to integrate computational thinking into their CT or CT-integrated lessons. This analysis examines 27 picture books and graphic novels published between 2015 and 2020 targeted to K-6 students for representation of computational thinking elements. Using the computational thinking curriculum framework for K-6, we identify the grade-level competencies of the CT elements featured in the books compared to the books’ target age groups. We compare grade-level competencies to interest level to identify each CT element representation as “foundational,” “on-target,” or “advanced.” We conclude that literature offers teachers a non-programming unplugged resource to expose students to CT and enhance CT and CT-integrated lessons, while also personalizing learning based on CT readiness and interest level.}
}

@article{doi:10.1177/1476718X231175464,
author = {Kathleen Campana and J Elizabeth Mills},
title = {Playing, tinkering, and problem solving: Understanding early computational thinking in libraries and museums},
journal = {Journal of Early Childhood Research},
volume = {21},
number = {3},
pages = {369–383},
year = {2023b},
doi = {10.1177/1476718X231175464},
URL = {https://doi-org.crai.referencistas.com/10.1177/1476718X231175464},
eprint = {https://doi-org.crai.referencistas.com/10.1177/1476718X231175464},
abstract = {Computational thinking (CT) has emerged as an important method in the United States for helping children learn to solve complex problems and develop skills necessary for coding and other computer science-related endeavors. Research has revealed that CT can be encouraged with children as young as 3–4 years of age. While some preschools and schools are incorporating CT into their curriculum for young children, ages 0–8 years, it is important to understand how environments outside of schools are using CT with young children, particularly given that, in the United States, a large percent of young children, ages 0–5 years, are not in formal school settings. This study provides insight into this area through 20 interviews with educators in libraries and museums to understand how they incorporate CT into their work with young children, ages 0–8 years, and their families. The interviews reveal that library and museum educators are using a variety of developmentally-appropriate approaches, such as play, experimentation, and narrative, to design and offer a diverse array of engaging, hands-on CT activities that allow young children to practice CT in child-centered, meaningful ways.}
}

@article{doi:10.1177/07356331211055379,
author = {Ndudi O. Ezeamuzie and Jessica S.C. Leung and Fridolin S.T. Ting},
title = {Unleashing the Potential of Abstraction From Cloud of Computational Thinking: A Systematic Review of Literature},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {4},
pages = {877–905},
year = {2022c},
doi = {10.1177/07356331211055379},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211055379},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211055379},
abstract = {Although abstraction is widely understood to be one of the primary components of computational thinking, the roots of abstraction may be traced back to different fields. Hence, the meaning of abstraction in the context of computational thinking is often confounded, as researchers interpret abstraction through diverse lenses. To disentangle these conceptual threads and gain insight into the operationalisation of abstraction, a systematic review of 96 empirical studies was undertaken. Analysis revealed that identifying features of entities, extracting relevant features, discovering patterns, creating rules and assembling the parts together were the core actions of abstraction. With the primary aim of simplifying practical procedures, abstraction was operationalised as the sophistication of a program, the matching of patterns, the creation of alternative representations, the transfer of solutions, the measurement of a learner’s activity and reading program codes. There is an obvious need for researchers to align the conceptual meanings they have established of abstraction with the practical facts of operationalisation. The need to empirically validate emerging models and the implications for future research are discussed.}
}

@article{doi:10.1177/2347631120970177,
author = {B. Gopinath and R. Santhi},
title = {Development and Evaluation of Fishbone-Based Advanced Computational Thinking (FACT) Pedagogy: A Teacher-Student Collaborative Learning Environment in Engineering and Science Education},
journal = {Higher Education for the Future},
volume = {8},
number = {1},
pages = {108–122},
year = {2021d},
doi = {10.1177/2347631120970177},
URL = {https://doi-org.crai.referencistas.com/10.1177/2347631120970177},
eprint = {https://doi-org.crai.referencistas.com/10.1177/2347631120970177},
abstract = {In this article, Fishbone-based advanced computational thinking (FACT) pedagogy is proposed by fusing fishbone pedagogy and computational thinking pedagogy for enhancing teaching-learning process while teaching engineering and science courses, for engineering and science students respectively. The proposed FACT pedagogy has been implemented using the concept of X-ray machine in biomedical instrumentation course and biomolecules, in biochemistry course. Using fishbone approach, various components of X-ray machine in biomedical course and the components of biomolecules in biochemistry course are visually explained as ribs and riblets of a fishbone diagram, without coining the keywords X-ray and biomolecules in an engineering institution and science institution respectively. Finally, the targeted concept is arrived and explained. Similarly, the same concepts of X-ray and biomolecules are coined among students and they are asked to divide or decompose the concepts into sub-concepts separately. To implement and evaluate the proposed pedagogy, an engineering institution and a science institution have been selected and evaluation results have been published in this article. In this pedagogical approach, the same complex concept is taught as a backward thinking by the teacher using fishbone pedagogy and forward thinking by the students using computational thinking pedagogy. This combined approach helps students to understand any complex concept in science courses. Also, it helps the teachers to easily convey and embed the same among the student community while teaching science courses.}
}

@article{doi:10.1177/07356331211057819,
author = {Marc Lafuente Martínez and Olivier Lévêque and Isabel Benítez and Cécile Hardebolle and Jessica Dehler Zufferey},
title = {Assessing Computational Thinking: Development and Validation of the Algorithmic Thinking Test for Adults},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {6},
pages = {1436–1463},
year = {2022e},
doi = {10.1177/07356331211057819},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211057819},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211057819},
abstract = {This study describes the development and validation process of a computational thinking (CT) test for adults. The team designed a set of items and explored a subset of those through two qualitative pilots. Then, in order to provide validity evidence based on the test content, a team of 11 subject-matter experts coded the initial pool of items using two different systems of categories based on CT components and contents. Next, the items were piloted on a sample of 289 participants, 137 experts in CT, and 152 novices. After a series of confirmatory factor analyses, a unidimensional model that represents algorithmic thinking was adopted. Further analyzing the psychometric quality of the 27 items, 20 of them with excellent reliability indices were selected for the test. Thus, this study provides a tool to evaluate adults’ CT: the Algorithmic Thinking Test for Adults (ATTA), which was developed according to psychometric standards. This article also reflects on the nature of CT as a construct.}
}

@article{doi:10.1177/0735633120905605,
author = {Chrystalla Mouza and Yi-Cheng Pan and Hui Yang and Lori Pollock},
title = {A Multiyear Investigation of Student Computational Thinking Concepts, Practices, and Perspectives in an After-School Computing Program},
journal = {Journal of Educational Computing Research},
volume = {58},
number = {5},
pages = {1029–1056},
year = {2020f},
doi = {10.1177/0735633120905605},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120905605},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120905605},
abstract = {In this work, we examine whether repeated participation in an after-school computing program influenced student learning of computational thinking concepts, practices, and perspectives. We also examine gender differences in learning outcomes. The program was developed through a school–university partnership. Data were collected from 138 students over a 2.5-year period. Data sources included pre–post content assessments of computational concepts related to programming in addition to computational artifacts and interviews with a purposeful sample of 12 participants. Quantitative data were analyzed using statistical methods to identify gains in pre- and post-learning of computational thinking concepts and examine potential gender differences. Interview data were analyzed qualitatively. Results indicated that students made significant gains in their learning of computational thinking concepts and that gains persisted over time. Results also revealed differences in learning of computational thinking concepts among boys and girls both at the beginning and end of the program. Finally, results from student interviews provided insights into the development of computational thinking practices and perspectives over time. Results have implications for the design of after-school computing programs that help broaden participation in computing.}
}

@article{doi:10.1177/07356331231180951,
author = {Xinyue Wang and Mengmeng Cheng and Xinfeng Li},
title = {Teaching and Learning Computational Thinking Through Game-Based Learning: A Systematic Review},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {7},
pages = {1505–1536},
year = {2023g},
doi = {10.1177/07356331231180951},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231180951},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231180951},
abstract = {Computational thinking (CT) is considered a fundamental skill that everyone in the 21st century should have. Game-based learning (GBL) may be used to teach CT, and it’s necessary to clarify how to design and implement game-based CT teaching. The literature was systematically searched for empirical studies published between 2011 and 2021. Thirty-nine studies were included in the review and findings suggested that GBL has positive effects on CT, but has non-significant effects on some CT elements (e.g., conditions, triggers, and abstraction) because of limited time to learn these elements and students’ preferences for using CT elements. Game elements, particularly clear goals and rules, progressive challenges, immediate feedback, storyline, avatar, social interaction and various reward mechanisms were used to motivate students to engage in activities to develop CT. Furthermore, single or multiple theoretical foundations, such as constructivist learning theory and experiential learning theory, may guide the design and implementation of game-based activities. Problem-solving, project-based approaches were used to encourage students to use CT to solve problems or complete a project. Finally, guidelines for designing and implementing game-based learning activities for promoting CT were discussed.}
}

@article{doi:10.1177/0735633120978530,
author = {Shenghua Zha and Debra A. L. Morrow and Jennifer Curtis and Shane Mitchell},
title = {Learning Culture and Computational Thinking in a Spanish Course: A Development Model},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {5},
pages = {844–869},
year = {2021h},
doi = {10.1177/0735633120978530},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120978530},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120978530},
abstract = {Computer science and computational thinking (CT) education in K-12 schools have been escalating in recent years. A couple of CT instructional models have been proposed to depict the roles of CT in K-16 education. Yet, neither of them discussed CT infusion into a subject course. In this article, we proposed a CT-integration model called TPC2T. In this model, we suggested considering CT as a second subject and using an appropriate technological pedagogical approach to make students’ learning of two subjects meaningful and engaging. We implemented this model in a CT-integrated lesson in two sections of a high-school Spanish course. Students worked in small groups and coded three small and one comprehensive digital Spanish-culture stories in Scratch. Results showed that students taking the CT-integrated lesson had the same degree of improvement in their Spanish culture knowledge as their peers who did not take the CT-integrated lesson. Besides, students taking the CT-integrated lesson had a significant improvement in their CT knowledge. At the same time, their CT self-efficacy outperformed those who did not take the CT-integrated lesson. We discussed the results and offered suggestions for researchers and educators at the end of the article.}
}

@article{doi:10.1177/20965311231158393,
author = {Yimei Zhang (张艺美) and Annie Savard},
title = {Defining Computational Thinking as an Evident Tool in Problem-Solving: Comparative Research on Chinese and Canadian Mathematics Textbooks},
journal = {ECNU Review of Education},
volume = {6},
number = {4},
pages = {677–699},
year = {2023i},
doi = {10.1177/20965311231158393},
URL = {https://doi-org.crai.referencistas.com/10.1177/20965311231158393},
eprint = {https://doi-org.crai.referencistas.com/10.1177/20965311231158393},
abstract = {Purpose To analyze mathematics problem-solving (PS) procedures in Chinese (CH) and Canadian (CA) elementary mathematics textbooks that leverage computational thinking (CT) as a cognitive tool, which have evidently existed and been implemented. Design/Approach/Methods In this study, an analysis framework was developed to investigate the characteristics of CT tools for three PS steps—understand the problem, devise and conduct plans, and look back into textbooks—in four contexts: data practices, modeling and simulation practices, computational tools practices, and systemic thinking practices. Findings Our results demonstrate the tools (CT) employed in the PS process in CH and CA mathematics textbooks. The strong connections between the “look back” stage and CT tools were explored. During the “look back” stage, both countries required students to transfer their knowledge and perform generalization. In addition, CT is regarded as a basic skill analysis for students in mathematics education and has received significant attention at every stage of the PS process. Originality/Value This study brings a new perspective to CT research in education by regarding CT as a cognitive tool for students in mathematics PS.}
}

@article{doi:10.1177/07356331241268474,
author = {Ruijie Zhou and Chong Xie and Xiuling He and Yangyang Li and Qiong Fan and Ying Yu and Zhonghua Yan},
title = {Effect of Different Flow Design Approaches on Undergraduates’ Computational Thinking During Pair Programming},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {7},
pages = {1865–1895},
year = {2024j},
doi = {10.1177/07356331241268474},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241268474},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241268474},
abstract = {Computational thinking (CT), an essential competency for comprehending and addressing intricate issues in the digital world, has been incorporated into curriculum planning as a goal for programming education. This study introduced flow design into programming curricula to investigate its impact on undergraduates ’CT skills during pair work. Two types of flow design approaches, construct-by-self flow design (CBS-FD) and construct-on-scaffold flow design (COS-FD), were proposed to determine which approach better enhances students’ CT skills. Seventy-six first-year undergraduates participated, including thirty in the CBS group and thirty-six in the COS group. Evaluations made from the results and processes of programming tasks were employed to describe computational performance and computational practices, respectively. Data gathered from CT skill surveys were thoroughly analyzed to gain a deeper understanding of computational perspectives. Our findings highlighted that COS-FD significantly improved participants’ computational performance compared with CBS-FD. The COS groups fostered an engaging, sharing atmosphere, while CBS groups spent more energy on negotiating the manipulation of flow design. Moreover, both COS-FD and CBS-FD proved beneficial in enhancing participants’ computational perspectives, with the COS groups better improving their algorithm thinking. The study presents valuable perspectives on the design and implementation of collaborative programming activities within curriculum education.}
}

