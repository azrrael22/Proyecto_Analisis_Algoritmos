@article{doi:10.3233/IA-2011-0012,
author = {Stefania Costantini and Alessio Paolucci and Arianna Tocchio and Panagiota Tsintza},
title = {DALI, RASP, mnemosine: Computational Logic at work},
journal = {Intelligenza Artificiale},
volume = {5},
number = {1},
pages = {107–111},
year = {2011a},
doi = {10.3233/IA-2011-0012},
URL = {https://doi-org.crai.referencistas.com/10.3233/IA-2011-0012},
eprint = {https://doi-org.crai.referencistas.com/10.3233/IA-2011-0012},
abstract = {In this paper, we briefly describe recent research directions of the Artificial Intelligence group of the University of L’Aquila, Italy. Research activities concern Computational Logic and Artificial Intelligence. About Intelligent Logical Agents, in the last years the group has developed the logical agent-oriented language DALI. Work is under way also in other areas, namely, Non-Monotonic Reasoning and Natural Language Processing. We particularly emphasize recent and future work directions.}
}

@article{doi:10.1177/1094342017747692,
author = {Anshu Dubey and Petros Tzeferacos and Don Q Lamb},
title = {The dividends of investing in computational software design: A case study},
journal = {The International Journal of High Performance Computing Applications},
volume = {33},
number = {2},
pages = {322–331},
year = {2019b},
doi = {10.1177/1094342017747692},
URL = {https://doi-org.crai.referencistas.com/10.1177/1094342017747692},
eprint = {https://doi-org.crai.referencistas.com/10.1177/1094342017747692},
abstract = {A significant fraction of computational software for scientific research grows through accretion. In a common scenario, a small group develops a code for a specific purpose. Others find the software useful, so they add to it for their own use. The software grows to the point where its management becomes intractable and scientific results obtained from it become unreliable. This is in stark contrast with a small number of scientific codes that have undergone a design process, be it due to an upfront investment, or when haphazardly grown codes have reset and started again. At a minimum, these codes reduce the time to obtain research results for the communities they serve because individual researchers do not have to develop their own codes. They provide further benefits; the results they produce are more reproducible due to greater scrutiny, leading to better science. One of the more overlooked benefits, which is perhaps of greater significance, is that a well-designed code can expand to serve communities beyond the ones it was designed for. Thus, research communities with similar computational requirements can symbiotically improve computation-based research for each other. In this article, we present a case study of FLASH, a code that was designed and developed for simulating thermonuclear runaways such as novae and type Ia supernovae in astrophysics. Designed to be modular and extensible, users from several diverse research areas have added capabilities to it and adapted it for their own communities. Examples include cosmology, high-energy density physics, core-collapse supernovae, star formation, fluid–structure interactions, and chemical combustion. We give a summary of design features that facilitated the expansion and quantify the effort needed to expand into some of the above-mentioned fields. We also quantify the impact on different communities by mining the database of publications using FLASH, collected by its developers.}
}

@article{doi:10.1177/07356331241240460,
author = {Jiangyue Liu and Siran Li},
title = {Toward Artificial Intelligence-Human Paired Programming: A Review of the Educational Applications and Research on Artificial Intelligence Code-Generation Tools},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {5},
pages = {1385–1415},
year = {2024c},
doi = {10.1177/07356331241240460},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241240460},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241240460},
abstract = {Pair Programming is considered an effective approach to programming education, but the synchronous collaboration of two programmers involves complex coordination, making this method difficult to be widely adopted in educational settings. Artificial Intelligence (AI) code-generation tools have outstanding capabilities in program generation and natural language understanding, creating conducive conditions for pairing with humans in programming. Now some more mature tools are gradually being implemented. This review summarizes the current status of educational applications and research on AI-assisted programming technology. Through thematic coding of literature, existing research focuses on five aspects: underlying technology and tool introduction, performance evaluation, the potential impacts and coping strategies, exploration of behavioral patterns in technological application, and ethical and safety issues. A systematic analysis of current literature provides the following insights for future academic research related to the practice of “human-machine pairing” in programming: (1) Affirming the value of AI code-generation tools while also clearly defining their technical limitations and ethical risks; (2) Developing adaptive teaching ecosystems and educational models, conducting comprehensive empirical research to explore the efficiency mechanisms of AI-human paired programming; (3) Further enriching the application of research methods by integrating speculative research with empirical research, combining traditional methods with emerging technologies.}
}

@article{doi:10.1177/20427530211022964,
author = {Rhett Loban},
title = {Modding Europa Universalis IV: An informal gaming practice transposed into a formal learning setting},
journal = {E-Learning and Digital Media},
volume = {18},
number = {6},
pages = {530–556},
year = {2021d},
doi = {10.1177/20427530211022964},
URL = {https://doi-org.crai.referencistas.com/10.1177/20427530211022964},
eprint = {https://doi-org.crai.referencistas.com/10.1177/20427530211022964},
abstract = {This article explores the use of modding as a formal tool for learning history. The article examines data from a formal analysis of Europa Universalis IV (EUIV), a survey of 331 EUIV forum participants and a case study of 18 university participants. Significant quantitative survey data indicated that 45% (149/331) of participants had modified EUIV, and of the 125 participants who responded with comments about modding, a significant number (86/125 responses or 68.8%) explained how they had learnt about history, geography or other subjects through the modding process. Closer analysis of survey and case study responses and mods reveals the variety of ways participants learnt and critiqued history through the modding process. The article discusses the data and the pedagogical affordance of modding in a few steps. First, the article briefly explores the evidence that indicates modding is popular within the EUIV gaming community. In this instance, it examines whether given the popularity of gaming practice, modding might also be seen as a new casual form of engagement with games. Second, the article reviews the modding process in EUIV and examines how both playing and creating mods may be beneficial for learning history. Modding is examined in terms of its pedagogical importance and the unique educational opportunities it may offer that are not otherwise accessible through other forms of game-based learning. Finally, the article explores how and what the case study participants learnt when they were tasked with creating and implementing playable mods to demonstrate their understanding of history. Overall, the article considers the growing importance of mods, how learners can create and represent history using mods and how mods can provide a platform for learners to develop their own critique and analysis of official history.}
}

@article{doi:10.3233/IA-2011-0018,
author = {Viviana Mascardi and Giorgio Delzanno and Maurizio Martelli},
title = {Some applications of Computational Logic to the development of intelligent systems and verification methods},
journal = {Intelligenza Artificiale},
volume = {5},
number = {1},
pages = {145–149},
year = {2011e},
doi = {10.3233/IA-2011-0018},
URL = {https://doi-org.crai.referencistas.com/10.3233/IA-2011-0018},
eprint = {https://doi-org.crai.referencistas.com/10.3233/IA-2011-0018},
abstract = {Computational Logic plays a very relevant role in engineering complex systems. It can be used to specify systems at different levels of abstraction. The specifications are executable, thus providing a working prototype for free. Thanks to its well-founded semantics it can be used to reason about the correctness of the specifications, a fundamental aspect when safety critical applications are developed. Researchers working in the Logic Programming Group at DISI, a Genova University Department, have applied methods and tools of Computational Logic for modelling, prototyping, and verifying complex systems. These three research lines are largely overlapping: the complex systems we take into account are often multiagent systems, for which we propose modelling languages as well as prototyping environments and verification techniques. In this paper we describe activities that, in the last decade, we carried out along these research lines.}
}

@article{doi:10.1177/0049124117729703,
author = {Laura K. Nelson},
title = {Computational Grounded Theory: A Methodological Framework},
journal = {Sociological Methods & Research},
volume = {49},
number = {1},
pages = {3–42},
year = {2020f},
doi = {10.1177/0049124117729703},
URL = {https://doi-org.crai.referencistas.com/10.1177/0049124117729703},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0049124117729703},
abstract = {This article proposes a three-step methodological framework called computational grounded theory, which combines expert human knowledge and hermeneutic skills with the processing power and pattern recognition of computers, producing a more methodologically rigorous but interpretive approach to content analysis. The first, pattern detection step, involves inductive computational exploration of text, using techniques such as unsupervised machine learning and word scores to help researchers to see novel patterns in their data. The second, pattern refinement step, returns to an interpretive engagement with the data through qualitative deep reading or further exploration of the data. The third, pattern confirmation step, assesses the inductively identified patterns using further computational and natural language processing techniques. The result is an efficient, rigorous, and fully reproducible computational grounded theory. This framework can be applied to any qualitative text as data, including transcribed speeches, interviews, open-ended survey data, or ethnographic field notes, and can address many potential research questions.}
}

@article{doi:10.2190/EC.51.1.e,
author = {Sarantos Psycharis and Evanthia Botsari and George Chatzarakis},
title = {Examining the Effects of Learning Styles, Epistemic Beliefs and the Computational Experiment Methodology on Learners’ Performance Using the Easy Java Simulator Tool in Stem Disciplines},
journal = {Journal of Educational Computing Research},
volume = {51},
number = {1},
pages = {91–118},
year = {2014g},
doi = {10.2190/EC.51.1.e},
URL = {https://doi-org.crai.referencistas.com/10.2190/EC.51.1.e},
eprint = {https://doi-org.crai.referencistas.com/10.2190/EC.51.1.e},
abstract = {Learning styles are increasingly being integrated into computational-enhanced earning environments and a great deal of recent research work is taking place in this area. The purpose of this study was to examine the impact of the computational experiment approach, learning styles, epistemic beliefs, and engagement with the inquiry process on the learning performance of pre-service engineering students. The study used the Felder-Silverman learning style model (FSLSM), in order to provide information for the relation of FSLSM with the learning environment in order to examine whether the strength of learning styles has an effect on the students’ learning performance in mismatched courses. Our objective was: a) to investigate whether students with a strong preference for a specific learning style have more difficulties in learning, if their learning style is not supported in the learning environment; b) if the methodology of the computational experiment has an impact on students independently of their learning style; and c) if the epistemological beliefs are related to different learning styles. The learning environment was based on the methodology of the computational experiment and applications were developed using the Easy Java Simulator software, while the inquiry based teaching and learning process was adopted. The questionnaire responses were gathered from 79 pre-service engineering students in a higher education institute in Greece. Results indicate that students with no preferred learning style have a better learning performance in mismatched courses.}
}

@article{doi:10.1177/0306419019876866,
author = {PC Sande and S Sharma},
title = {Synectics model applied in basic theory of computational fluid dynamics},
journal = {International Journal of Mechanical Engineering Education},
volume = {49},
number = {2},
pages = {171–191},
year = {2021h},
doi = {10.1177/0306419019876866},
URL = {https://doi-org.crai.referencistas.com/10.1177/0306419019876866},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0306419019876866},
abstract = {Computational fluid dynamics is taught in many universities and is a trending elective option among engineering students. Although analyzing computational fluid dynamics simulations is exciting enough, the theory is equation intensive, sometimes very abstract and also difficult to visualize for the novice. A creative thinking based approach termed synectics, which involves analogies, was therefore applied in classroom teaching to increase student comfort with the equations. For this purpose six analogies encompassing basic computational fluid dynamics concepts were developed along with pictorial representations, and are presented in this work. These analogies were integrated into classroom teaching via synectics procedures. Student feedback was positive and reflected higher engagement with the course compared to when the metaphoric activity was not implemented. This work attempts to demonstrate the feasibility and value of applying creative techniques, even when teaching a highly structured and equation oriented course such as computational fluid dynamics.}
}

@article{doi:10.1177/07356331221115661,
author = {Xiaojing Weng and Oi-Lam Ng and Zhihao Cui and Suzannie Leung},
title = {Creativity Development With Problem-Based Digital Making and Block-Based Programming for Science, Technology, Engineering, Arts, and Mathematics Learning in Middle School Contexts},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {2},
pages = {304–328},
year = {2023i},
doi = {10.1177/07356331221115661},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221115661},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221115661},
abstract = {Creativity, one of the cornerstones of students’ 21st-century skills, is regarded as an important learning outcome of science, technology, engineering, arts, and mathematics (STEAM) education. Meanwhile, problem-based digital making (DM), which combines the child-friendly programming activities of DM with problem-solving elements, is an emerging instructional design to facilitate STEAM learning. This qualitative case study examines the implementation of a problem-based DM instructional program that used the block-based programming tool Scratch to cultivate the participants’ creativity. Fifty-four middle school students (aged 10–14 years) in Hong Kong participated in the program, which totaled 10 contact hours over five consecutive weeks. Through triangulating students’ DM artifacts, video recordings, field notes, and interviews, the researchers characterized the students’ creative expression, examined the role of problem-based DM in encouraging creative work, and investigated the use of Scratch for mediating student creativity. The results showed that problem-based DM activities fostered students’ creative expressions in the dimensions of novelty, utility, aesthetics, and authenticity. While Scratch mediated the way the students presented their solutions, it had limitations that hindered the students’ digital artifact construction. The findings provide theoretical insights for framing creativity and offer practical implications for the implementation of problem-based DM in K–12 contexts.}
}

@article{doi:10.1177/2399808319885210,
title = {Winners of the Breheny Prize},
journal = {Environment and Planning B: Urban Analytics and City Science},
volume = {46},
number = {9},
pages = {1603–1604},
year = {2019j},
doi = {10.1177/2399808319885210},
URL = {https://doi-org.crai.referencistas.com/10.1177/2399808319885210},
eprint = {https://doi-org.crai.referencistas.com/10.1177/2399808319885210}
}

